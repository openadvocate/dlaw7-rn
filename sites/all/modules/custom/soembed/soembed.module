<?php

/**
 * @file
 * Lets author embed rich media by inserting UTL using oEmbed techonology
 * Based on contrib beta 2 version and modified.
 */

function soembed_filter_info() {
  $filters['soembed'] = array(
    'title' => t('Simple oEmbed filter'),
    'description' => t('Embeds media for URL that supports oEmbed standard.'),
    'process callback' => 'soembed_filter_embed_process',
    'settings callback' => 'soembed_filter_oembed_settings',
    'tips callback' => 'soembed_filter_embed_tips',
    'default settings' => array(
      'soembed_maxwidth' => '500',
    ),
  );
  return $filters;
}

/**
 * Implements hook_filter_FILTER_process().
 */
function soembed_filter_embed_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  static $check_settings;

  // Set maxwidth variable for use by soembed_filter_embed(), otherwise cannot pass the value.
  if (empty($check_settings)) {
    if ($filter->settings['soembed_maxwidth'] != variable_get('soembed_maxwidth', 0)) {
      variable_set('soembed_maxwidth', (int)$filter->settings['soembed_maxwidth']);
    }

    $check_settings = TRUE;
  }

  $lines = explode("\n", $text);
  $lines = preg_replace_callback('#^(<p>|<p +class="\w+">)?(https?://\S+?)(\s+https?://\S+?)?(</p>)?$#', 'soembed_filter_embed', $lines);

  return implode("\n", $lines);
}

/**
 * Implements hook_filter_FILTER_settings().
 */
function soembed_filter_oembed_settings($form, &$form_state, $filter, $format, $defaults, $filters) {
  $filter->settings += $defaults;

  $settings = array();
  $settings['soembed_maxwidth'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum width of media embed'),
    '#default_value' => $filter->settings['soembed_maxwidth'],
    '#description' => t('Set the maximum width of an embedded media. The unit is in pixels, but only put a number in the textbox.'),
  );
  return $settings;
}

/**
 * Implements hook_filter_FILTER_tips().
 */
function soembed_filter_embed_tips($filter, $format, $long) {
  if ($long) {
    return t('To embed an external media, place the URL on its own line. If there is an error or no support, the URL will be printed as is.');
  }
  else {
    return t('To embed an external media, place the URL on its own line.');
  }
}

function soembed_filter_embed($match) {
  static $providers;
  $extra_css_class = '';

  if (empty($providers)) {
    require_once "soembed.providers.inc";
  }

  $url = $match[2];

  if (trim($match[3])) {
    $url .= ' ' . trim($match[3]);
  }

  foreach ($providers as $matchmask => $data) {
    list($providerurl, $regex) = $data;

    if (!$regex) {
      $matchmask = '#' . str_replace( '___wildcard___', '(.+)', preg_quote(str_replace('*', '___wildcard___', $matchmask), '#')) . '#i';
    }

    if (preg_match($matchmask, $url)) {
      $provider = $providerurl;
      break;
    }
  }

  if (!empty($provider)) {
    // http://www.php-code.net/2010/05/oembed-transforming-video-links-to-embeds/
    // SEE FOR RESIZING MEDIA: https://gist.github.com/1313517
    if ($regex === 'LOCAL') {
      $output = somebed_get_contents($provider, $url);

      if (in_array($provider, array('google-docs', 'google-docs-form'))) {
        $style = 'min-height: 650px';
      }
      $extra_css_class = 'provider-' . $provider;
    }
    elseif ($response = drupal_http_request($provider . "?url=$url&format=json&maxwidth=" . variable_get('soembed_maxwidth', 0))) {
      if ($response->code == 200) {
        $embed = json_decode($response->data);

        if (!empty($embed->html)) {
          $output = $embed->html;
        }
        elseif ($embed->type == 'photo') {
          $output = '<img src="' . $embed->url . '" title="' . $embed->title . '" style="width: 100%" />';
          $output = '<a href="' . $url . '">' . $output .'</a>';
        }

        $extra_css_class = soembed_get_provider_domain($provider);
        if (!empty($extra_css_class)) {
          $extra_css_class = 'provider-' . $extra_css_class;
        }
      }
    }
  }

  $output = empty($output) ? $url : $output;

  if (count($match) > 4) {
    $output = $match[1] . $output . $match[4]; // Add <p> and </p> back.
  }

  return '<div class="oembed_container ' . $extra_css_class . '" style="' . (!empty($style) ? $style : '') . '">' .$output . '</div>';
}

/**
 * Returns second level domain.
 */
function soembed_get_provider_domain($provider) {
  $last_domain = '';
  preg_match('#^https?://([\w-.]+)\.#', $provider, $matches);
  if (!empty($matches)) {
    $domain = $matches[1];
    $domains = explode('.', $domain);
    $last_domain = array_pop($domains);
  }
  return $last_domain;
}

/**
 * Locally create HTML after pattern study for sites that don't support oEmbed.
 */
function somebed_get_contents($provider, $url) {
  $width = variable_get('soembed_maxwidth', 0);

  switch ($provider) {
    case 'google-maps':
    case 'google-maps-short':
      $height = (int)($width / 1.3);

      if ($provider == 'google-maps-short') {
        $response = drupal_http_request($url);
        if (!empty($response->redirect_url)) {
          $redirect_url = parse_url($response->redirect_url);
          if (!empty($redirect_url['query'])) {
            parse_str($redirect_url['query'], $query);

            $addr = !empty($query['q']) ? $query['q'] : '';
            $zoom = !empty($query['z']) ? $query['z'] : '17';
          }
        }
      }
      // $provider == 'google-maps'
      else {
        preg_match('#/maps/\w+/([^/]+)/@[\d.-]+,[\d.-]+,(\d+)z/#', $url, $matches);

        if (count($matches) == 3) {
          $addr = $matches[1];
          $zoom = $matches[2];
        }
      }

      if (!empty($addr) && !empty($zoom)) {
        $key = 'AIzaSyD9cUGhavZRjs8HoGFemNBLj-bC9KGmTzQ';

        $embed = '<iframe src="' . "https://www.google.com/maps/embed/v1/place?key=$key&zoom=$zoom&q=$addr" . '" width="' . $width . '" height="' . $height . '" frameborder="0"></iframe>';
      }
      elseif (preg_match('#/maps/d/embed#', $url, $matches)) {
        $embed = '<iframe src="' . $url . '" width="' . $width . '" height="' . $height . '" frameborder="0"></iframe>';
      }
      else {
        $embed = $url;
      }
      break;

    case 'google-docs':
      $height = (int)($width * 1.5);
      $embed  = "<iframe width='{$width}' height='{$height}' frameborder='0' src='{$url}&widget=true'></iframe>";
      break;

    case 'google-docs-form':
      $height = (int)($width * 1.5);
      $embed  = "<iframe width='{$width}' height='{$height}' frameborder='0' src='{$url}'></iframe>";
      break;

    case 'google-docs-prez':
      list($url, $discard) = preg_split('@/(edit|embed|pub)(#|\?)@', $url);
      $url .= '/embed';
      $height = (int)($width * 0.62);
      $embed  = "<iframe width='{$width}' height='{$height}' frameborder='0' src='{$url}' allowfullscreen='true' mozallowfullscreen='true' webkitallowfullscreen='true'></iframe>";
      break;

    case 'google-cal':
      $height = (int)($width / 1.3);
      $embed = "<iframe src='$url' style='border: 0' width='$width' height='$height' frameborder='0' scrolling='no'></iframe>";
      break;

    case 'guideclearly':
      $count = substr_count($url, 'guideclearly.com');

      if ($count == 1) {
        if (preg_match('#/guide/(\d+)([^\?]*)(\?s=(1|2))?#', $url, $matches)) {
          $nid = (int)$matches[1];

          if (!empty($matches[4]) and $matches[4] == '2') {
            $size = 'width="400" height="400"';
          }
          else {
            $size = 'width="315" height="420"';
          }

          $embed = "<iframe class='guideclearly' src='https://www.guideclearly.com/viewer/guide/{$nid}' {$size}></iframe>";
        }
      }
      elseif ($count == 2) {
        if (preg_match('#/guide/(\d+)([^ ]*)\s+\S+/guide/(\d+)#', $url, $matches)) {
          // When putting two GCs, ignore request size in '?s=1' or '?s=2'
          $nid1 = (int)$matches[1];
          $nid2 = (int)$matches[3];

          $embed = "<iframe class='guideclearly' src='https://www.guideclearly.com/viewer/guide/{$nid1}' width='315' height='420'></iframe>"
                 . "<iframe class='guideclearly' src='https://www.guideclearly.com/viewer/guide/{$nid2}' width='315' height='420' style='margin-left: 20px'></iframe>";
        }
      }

      $embed = !empty($embed) ? $embed : $url;
      break;

    case 'webchat':
      if (preg_match('#/webchat/(.+)#', $url, $matches)) {
        $embed = <<<OUT
          <link href="https://api.motion.ai/sdk/webchat.css" rel="stylesheet" type="text/css">
          <script src="https://api.motion.ai/sdk/webchat.js"></script>
          <script>
            motionAI_Init('{$matches[1]}',true,400,470,'https://api.motion.ai/sdk/botbtn.png');
          </script>
OUT;
      }
      break;

    default:
      $embed = $url;
  }

  $embed = str_replace('&amp;', '&', $embed);

  return $embed;
}
